{"id":"../node_modules/highlight.js/lib/languages/clojure.js","dependencies":[{"name":"C:\\home\\JS_practice\\package.json","includedInParent":true,"mtime":1559541468139},{"name":"C:\\home\\JS_practice\\node_modules\\highlight.js\\package.json","includedInParent":true,"mtime":1559541462771}],"generated":{"js":"module.exports = function(hljs) {\r\n  var keywords = {\r\n    'builtin-name':\r\n      // Clojure keywords\r\n      'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem '+\r\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '+\r\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '+\r\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '+\r\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '+\r\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '+\r\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '+\r\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '+\r\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '+\r\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '+\r\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '+\r\n      'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or '+\r\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '+\r\n      'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast '+\r\n      'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import '+\r\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '+\r\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '+\r\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '+\r\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '+\r\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '+\r\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '+\r\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '+\r\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '+\r\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '+\r\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '+\r\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '+\r\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\r\n   };\r\n\r\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\r\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\r\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\r\n\r\n  var SYMBOL = {\r\n    begin: SYMBOL_RE,\r\n    relevance: 0\r\n  };\r\n  var NUMBER = {\r\n    className: 'number', begin: SIMPLE_NUMBER_RE,\r\n    relevance: 0\r\n  };\r\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\r\n  var COMMENT = hljs.COMMENT(\r\n    ';',\r\n    '$',\r\n    {\r\n      relevance: 0\r\n    }\r\n  );\r\n  var LITERAL = {\r\n    className: 'literal',\r\n    begin: /\\b(true|false|nil)\\b/\r\n  };\r\n  var COLLECTION = {\r\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\r\n  };\r\n  var HINT = {\r\n    className: 'comment',\r\n    begin: '\\\\^' + SYMBOL_RE\r\n  };\r\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\r\n  var KEY = {\r\n    className: 'symbol',\r\n    begin: '[:]{1,2}' + SYMBOL_RE\r\n  };\r\n  var LIST = {\r\n    begin: '\\\\(', end: '\\\\)'\r\n  };\r\n  var BODY = {\r\n    endsWithParent: true,\r\n    relevance: 0\r\n  };\r\n  var NAME = {\r\n    keywords: keywords,\r\n    lexemes: SYMBOL_RE,\r\n    className: 'name', begin: SYMBOL_RE,\r\n    starts: BODY\r\n  };\r\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\r\n\r\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\r\n  BODY.contains = DEFAULT_CONTAINS;\r\n  COLLECTION.contains = DEFAULT_CONTAINS;\r\n  HINT_COL.contains = [COLLECTION];\r\n\r\n  return {\r\n    aliases: ['clj'],\r\n    illegal: /\\S/,\r\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\r\n  }\r\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/clojure.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}}],"sources":{"../node_modules/highlight.js/lib/languages/clojure.js":"module.exports = function(hljs) {\r\n  var keywords = {\r\n    'builtin-name':\r\n      // Clojure keywords\r\n      'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem '+\r\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '+\r\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '+\r\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '+\r\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '+\r\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '+\r\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '+\r\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '+\r\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '+\r\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '+\r\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '+\r\n      'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or '+\r\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '+\r\n      'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast '+\r\n      'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import '+\r\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '+\r\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '+\r\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '+\r\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '+\r\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '+\r\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '+\r\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '+\r\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '+\r\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '+\r\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '+\r\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '+\r\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\r\n   };\r\n\r\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\r\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\r\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\r\n\r\n  var SYMBOL = {\r\n    begin: SYMBOL_RE,\r\n    relevance: 0\r\n  };\r\n  var NUMBER = {\r\n    className: 'number', begin: SIMPLE_NUMBER_RE,\r\n    relevance: 0\r\n  };\r\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\r\n  var COMMENT = hljs.COMMENT(\r\n    ';',\r\n    '$',\r\n    {\r\n      relevance: 0\r\n    }\r\n  );\r\n  var LITERAL = {\r\n    className: 'literal',\r\n    begin: /\\b(true|false|nil)\\b/\r\n  };\r\n  var COLLECTION = {\r\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\r\n  };\r\n  var HINT = {\r\n    className: 'comment',\r\n    begin: '\\\\^' + SYMBOL_RE\r\n  };\r\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\r\n  var KEY = {\r\n    className: 'symbol',\r\n    begin: '[:]{1,2}' + SYMBOL_RE\r\n  };\r\n  var LIST = {\r\n    begin: '\\\\(', end: '\\\\)'\r\n  };\r\n  var BODY = {\r\n    endsWithParent: true,\r\n    relevance: 0\r\n  };\r\n  var NAME = {\r\n    keywords: keywords,\r\n    lexemes: SYMBOL_RE,\r\n    className: 'name', begin: SYMBOL_RE,\r\n    starts: BODY\r\n  };\r\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\r\n\r\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\r\n  BODY.contains = DEFAULT_CONTAINS;\r\n  COLLECTION.contains = DEFAULT_CONTAINS;\r\n  HINT_COL.contains = [COLLECTION];\r\n\r\n  return {\r\n    aliases: ['clj'],\r\n    illegal: /\\S/,\r\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\r\n  }\r\n};"},"lineCount":95}},"error":null,"hash":"1e2d0c1a757384c5fca9ee390f09c204","cacheData":{"env":{}}}