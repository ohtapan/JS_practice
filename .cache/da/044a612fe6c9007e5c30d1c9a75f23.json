{"id":"../node_modules/highlight.js/lib/languages/coq.js","dependencies":[{"name":"C:\\home\\JS_practice\\package.json","includedInParent":true,"mtime":1559541468139},{"name":"C:\\home\\JS_practice\\node_modules\\highlight.js\\package.json","includedInParent":true,"mtime":1559541462771}],"generated":{"js":"module.exports = function(hljs) {\r\n  return {\r\n    keywords: {\r\n      keyword:\r\n        '_ as at cofix else end exists exists2 fix for forall fun if IF in let ' +\r\n        'match mod Prop return Set then Type using where with ' +\r\n        'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +\r\n        'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +\r\n        'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +\r\n        'Conjectures Constant constr Constraint Constructors Context Corollary ' +\r\n        'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent' +\r\n        'Derive Drop eauto End Equality Eval Example Existential Existentials ' +\r\n        'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +\r\n        'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +\r\n        'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +\r\n        'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +\r\n        'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +\r\n        'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +\r\n        'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +\r\n        'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +\r\n        'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +\r\n        'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +\r\n        'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +\r\n        'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +\r\n        'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +\r\n        'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +\r\n        'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +\r\n        'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +\r\n        'Verbose Visibility where with',\r\n      built_in:\r\n        'abstract absurd admit after apply as assert assumption at auto autorewrite ' +\r\n        'autounfold before bottom btauto by case case_eq cbn cbv change ' +\r\n        'classical_left classical_right clear clearbody cofix compare compute ' +\r\n        'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +\r\n        'cycle decide decompose dependent destruct destruction dintuition ' +\r\n        'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +\r\n        'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +\r\n        'einjection eleft elim elimtype enough equality erewrite eright ' +\r\n        'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +\r\n        'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +\r\n        'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +\r\n        'induction injection instantiate intro intro_pattern intros intuition ' +\r\n        'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +\r\n        'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +\r\n        'record red refine reflexivity remember rename repeat replace revert ' +\r\n        'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +\r\n        'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +\r\n        'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +\r\n        'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +\r\n        'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +\r\n        'unfold unify until using vm_compute with'\r\n    },\r\n    contains: [\r\n      hljs.QUOTE_STRING_MODE,\r\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\r\n      hljs.C_NUMBER_MODE,\r\n      {\r\n        className: 'type',\r\n        excludeBegin: true,\r\n        begin: '\\\\|\\\\s*',\r\n        end: '\\\\w+'\r\n      },\r\n      {begin: /[-=]>/} // relevance booster\r\n    ]\r\n  };\r\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/highlight.js/lib/languages/coq.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}}],"sources":{"../node_modules/highlight.js/lib/languages/coq.js":"module.exports = function(hljs) {\r\n  return {\r\n    keywords: {\r\n      keyword:\r\n        '_ as at cofix else end exists exists2 fix for forall fun if IF in let ' +\r\n        'match mod Prop return Set then Type using where with ' +\r\n        'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +\r\n        'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +\r\n        'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +\r\n        'Conjectures Constant constr Constraint Constructors Context Corollary ' +\r\n        'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent' +\r\n        'Derive Drop eauto End Equality Eval Example Existential Existentials ' +\r\n        'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +\r\n        'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +\r\n        'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +\r\n        'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +\r\n        'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +\r\n        'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +\r\n        'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +\r\n        'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +\r\n        'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +\r\n        'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +\r\n        'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +\r\n        'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +\r\n        'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +\r\n        'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +\r\n        'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +\r\n        'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +\r\n        'Verbose Visibility where with',\r\n      built_in:\r\n        'abstract absurd admit after apply as assert assumption at auto autorewrite ' +\r\n        'autounfold before bottom btauto by case case_eq cbn cbv change ' +\r\n        'classical_left classical_right clear clearbody cofix compare compute ' +\r\n        'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +\r\n        'cycle decide decompose dependent destruct destruction dintuition ' +\r\n        'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +\r\n        'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +\r\n        'einjection eleft elim elimtype enough equality erewrite eright ' +\r\n        'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +\r\n        'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +\r\n        'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +\r\n        'induction injection instantiate intro intro_pattern intros intuition ' +\r\n        'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +\r\n        'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +\r\n        'record red refine reflexivity remember rename repeat replace revert ' +\r\n        'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +\r\n        'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +\r\n        'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +\r\n        'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +\r\n        'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +\r\n        'unfold unify until using vm_compute with'\r\n    },\r\n    contains: [\r\n      hljs.QUOTE_STRING_MODE,\r\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\r\n      hljs.C_NUMBER_MODE,\r\n      {\r\n        className: 'type',\r\n        excludeBegin: true,\r\n        begin: '\\\\|\\\\s*',\r\n        end: '\\\\w+'\r\n      },\r\n      {begin: /[-=]>/} // relevance booster\r\n    ]\r\n  };\r\n};"},"lineCount":66}},"error":null,"hash":"6ec062a1a9975aa5d92e70c90d8ccf29","cacheData":{"env":{}}}